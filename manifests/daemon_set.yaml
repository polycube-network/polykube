
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: polykube
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: polykube
      # The following should not be necessary anymore
      # kubernetes.io/cluster-service: "true"
  template:
    metadata:
      labels:
        k8s-app: polykube
        # The following should not be necessary anymore
        # kubernetes.io/cluster-service: "true"
      # annotations:
        # Mark polycube as critical, gets priority
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        # The following was replaced by .spec.priorityClassName: system-node-critical
        # scheduler.alpha.kubernetes.io/critical-pod: ''
        # The following was replaced by a toleration in the .spec.tolerations list
        # scheduler.alpha.kubernetes.io/tolerations: >-
        #  [{"key":"dedicated","operator":"Equal","value":"master","effect":"NoSchedule"}]
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: polykube-ctrl-mgr-sa
      hostNetwork: true
      containers:
        - name: polycubed
          image: ekoops/polycube:latest
          imagePullPolicy: Always
          terminationMessagePolicy: FallbackToLogsOnError # in order to allow k8s to retrieve log from container stderr
          securityContext:
            privileged: true
          command: ["polycubed",
                    "--loglevel=INFO",
                    "--addr=0.0.0.0",
                    "--logfile=/host/var/log/polycubed.polykube.log"]
#          livenessProbe: # TODO maybe the livenessProbe might be removed
#            httpGet:
#              host: 127.0.0.1
#              path: /polycube/v1/ # TODO change this
#              port: 9000
#            initialDelaySeconds: 60 # TODO check
#            timeoutSeconds: 10 # TODO check
#            periodSeconds: 20 # TODO check
          volumeMounts:
            - name: lib-modules
              mountPath: /lib/modules
            - name: usr-src
              mountPath: /usr/src
            - name: var-log
              mountPath: /host/var/log
        - name: polykube-operator
          image: ekoops/polykube-operator:latest
          imagePullPolicy: Always
          terminationMessagePolicy: FallbackToLogsOnError # in order to allow k8s to retrieve log from container stderr
          securityContext:
            privileged: true
          command: ["/polykube"]
          lifecycle:
            postStart:
              exec:
                command:
                  - "/cni-install.sh"
            preStop:
              exec:
                command:
                  - "/cni-uninstall.sh"
#          livenessProbe:
#            httpGet:
#              path: /healthz
#              port: 8081
#            initialDelaySeconds: 15
#            periodSeconds: 20
#          readinessProbe:
#            httpGet:
#              path: /readyz
#              port: 8081
#            initialDelaySeconds: 5
#            periodSeconds: 10
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: VXLAN_IFACE_NAME
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: vxlanIfaceName
            - name: VTEP_CIDR
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: vtepCidr
            - name: CLUSTER_CIDR
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: clusterCidr
            - name: NODEPORT_RANGE
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: nodePortRange
            - name: CNI_CONF_FILE_PATH
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: cniConfFilePath
            - name: POLYCUBE_MTU
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: mtu
            - name: POLYCUBE_INT_K8S_LBRP_NAME
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: intK8sLbrpName
            - name: POLYCUBE_ROUTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: routerName
            - name: POLYCUBE_EXT_K8S_LBRP_NAME
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: extK8sLbrpName
            - name: POLYCUBE_K8SDISP_NAME
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: k8sDispName
            - name: POLYCUBE_CUBES_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: cubesLogLevel
            - name: IS_CP_NODES_DEPLOY_ALLOWED
              valueFrom:
                configMapKeyRef:
                  name: polykube-cfg
                  key: isCPNodesDeployAllowed
          volumeMounts:
            - name: opt-cni-bin
              mountPath: /host/opt/cni/bin
            - name: etc-cni-netd
              mountPath: /host/etc/cni/net.d
      volumes:
        - name: opt-cni-bin
          hostPath:
            path: /opt/cni/bin
        - name: etc-cni-netd # installing polykube-00.conf into the right host folder: used by operator
          hostPath:
            path: /etc/cni/net.d
        - name: var-log   # destination the polycube log into the right host folder: used by polycube
          hostPath:
            path: /var/log
        - name: lib-modules   # kernel headers and other kernel stuff
          hostPath:
            path: /lib/modules
        - name: usr-src     # kernel headers and other kernel stuff
          hostPath:
            path: /usr/src
      tolerations:
        - effect: NoSchedule
          key: node.kubernetes.io/not-ready
        #  Uncomment the following lines in order to allow deployment on master node
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
        - key: CriticalAddonsOnly
          operator: "Exists"